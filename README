This is about driver updates. If you're not familiar with them, please look at

  http://ftp.suse.com/pub/people/hvogel/Update-Media-HOWTO/index.html

and

  http://en.opensuse.org/SDB:Linuxrc#p_driverupdate

first.


1. Updating RPMs
----------------

If you need to update packages during installation via driver update, either
in the installation environment or the final installed system, this script
helps you to setup such a driver update.

There are two ways for this:

(a) The old ('rpm') way: place all rpms into the 'install' directory and
    YaST will run 'rpm -U install/*.rpm' at the end of the first installation
    stage.

(b) Since SLE11/openSUSE 12.1 YaST lets you register a repository
    automatically. The repo priority can be set higher (numerically lower)
    than the default priority (99) to ensure the driver update packages are
    preferred.

Method (b) has the advantage that the old packages are never installed and
used and conficts and dependencies are automatically resolved (think of
different kernel flavors).

This script supports both ways.

Examples:


(1)
- update perl-Bootloader with method (a) _and_ (b), repo priority is 50:
# mkdud --dist sle11 --create foo1.dud perl-Bootloader.rpm


(2)
- update perl-Bootloader and yast2-bootloader for both i586 and x86_64, using
  only method (b), repo priority is 90:

# ls perl-Bootloader/binaries/* yast2-bootloader/binaries/*
perl-Bootloader/binaries/perl-Bootloader-0.4.89.30-1.10.i586.rpm
yast2-bootloader/binaries/yast2-bootloader-2.17.78-1.1.i586.rpm
perl-Bootloader/binaries/perl-Bootloader-0.4.89.30-1.10.x86_64.rpm
yast2-bootloader/binaries/yast2-bootloader-2.17.78-1.1.x86_64.rpm

# mkdud --install repo --prio 90 --dist sle11 --create foo2.dud perl-Bootloader/binaries/* yast2-bootloader/binaries/*


(3)
- replace yast2-bootloader only in the installation system, for i586 and x86_64:

# ls yast2-bootloader/binaries/*
yast2-bootloader/binaries/yast2-bootloader-2.17.78-1.1.i586.rpm
yast2-bootloader/binaries/yast2-bootloader-2.17.78-1.1.x86_64.rpm

# mkdud --install instsys --dist sle11 --create foo3.dud yast2-bootloader/binaries/*


2. Adding and running programms
-------------------------------

Sometimes you need to include and run a script to fix things. For example

# mkdud --dist sle11 --exec bar --create foo4.dud bar

adds 'bar' to the 'install' directory and runs it. Unlike the 'update.pre'
script it is run just after the dud has been read, even _before_ any dud
modules are loaded.

You can combine this with rpms:

# mkdud --install instsys --dist sle11 --exec fix_it --create foo5.dud yast2-bootloader/binaries/* fix_it

This replaces yast2-bootloader and also adds and runs the 'fix_it' script.


3. Conditional DUDs
-------------------

If a DUD must only be applied to certain machines or only to specific
service packs, you can add a condition script that is run when the DUD
config file is parsed during installation. This script must exit with 0 to
indicate that it's ok to continue with the DUD. If the exit code is nonzero
a message is printed that the update will not be applied and the update is
deleted.

mkdud can generate scripts automatically that check for sle10 and sle11
service packs. They are used if you name the script 'ServicePackN'. If you
want to use your own scripts with such a name, specify it e.g. as
'./ServicePack1' on the command line.

